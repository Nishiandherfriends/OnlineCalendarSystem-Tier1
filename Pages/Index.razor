@page "/"
@using OnlineCalendarSystem_Tier1.Models
@using OnlineCalendarSystem_Tier1.Data
@inject OnlineCalendarSystem_Tier1.Data.OnlineCalendarService OnlineCalendarService
<style>
    header{
        padding: 25px;
    }
    .shadow{
        transition: 0.3s
    }
    .shadow:hover{
        -webkit-box-shadow: 0px 4px 15px -6px rgba(0,0,0,0.75);
        -moz-box-shadow: 0px 4px 15px -6px rgba(0,0,0,0.75);
        box-shadow: 0px 4px 15px -6px rgba(0,0,0,0.75);;
    }
    .calendar{
        padding: 10px;
    }
    .calendar-table{
        margin: 10px;
        width: 100%;
        background-color: #f3f2f1;
        text-align: center;
    }
    .calendar-table thead{
        background-color: white;
    }
    .calendar-table td{
        padding: 4px;
    }
    .calendar-table .day{
        width: 125px;
        height: 125px;
        min-width: 125px;
        margin:5px;
        border-radius: 5px;
        background-color: white;
        padding: 5px;
        cursor: pointer;
    }
    .current-day{
        border: 2px solid  #1b6ec2;
        color: #1b6ec2;
    }
    .selected-day{
        border: 2px solid #002752;
        color:#002752;
        background-color: #abdde5 !important;
    }
     .day .day-event{
        font-size: 10px;
        padding: 5px;
    }
    .red-orange {
        background: #da3b01;
        color: white;
    }
    
    .magenta {
        background: #881798;
        color: white;
    }
    
    .pink-red {
        background-color: #750b1c;
        color: white;
    }
    
    .yellow {
        background: #fce100;
        color: black;
    }
    
    .yellow-green {
        background: #8cbd18;
        color: black;
    }
    .calendar-toolbar{
        background-color: #1b6ec2;
        color: white;
    }
    .toolbar-button{
        background: #1b6ec2;
        margin: 0px;
        padding: 5px 10px;
        text-align: center;
        vertical-align: middle;
        outline: none;
        font-size: 25px;
        font-weight: 100;
        color:white;
        border:none;
    }
    .toolbar-button:hover{
        background: #002752;
    }
    .toolbar-button:focus{
        border: none;
        outline:none;
    }
    .fl-input{
        display: block;
        width:100%;
        padding: 3px 7px;
        margin: 10px 0px;
        border: 1px solid #3b3a39;
    }
    .input:focus{
        outline:none;
        border: 2px dashed #1b6ec2;
    }
    .card-div{
        padding: 10px;
    }
    .event {
        border-radius: 5px;
        margin: 10px 5px;
        padding: 5px;
    }
    .card{
        margin:10px;
    }
</style>
<header>
    <h3 class="ms-fontSize-40 ms-fontWeight-regular"> Online Calendar System</h3>
    <p class="ms-fontSize-15 ms-fontWeight-regular"> Welcome to our SEP3 group project</p>
    <AuthorizeView>
        <NotAuthorized>
        <p class="ms-fontSize-15 ms-fontWeight-regular"> Please <a href="login" class="shadow">sign in</a> to get started</p>
    </NotAuthorized>
        </AuthorizeView>
</header>
 <div class="row">
     <div class="col-sm-12 col-md-12  col-lg-9">
         <Calendar>
             <DayTemplate Context="day">
                 @{
                     string currentDay = day.DateTime == DateTime.Now.Date ? "current-date" : "";                       
                 }
                 @if (!day.isEmpty)
                 {
                     <div class="day shadow @currentDay">
                         <h3 class="ms-fontSize-20 ms-fontWeight-regular">@day.day</h3>
                     </div>
                 }
             </DayTemplate>
         </Calendar>
         
     </div>
 </div>

@*<style type="text/css">
    #tblParent tbody tr td {
        width: 200px;
        height: 200px;
    }

    #divParent {
        position: relative;
    }

    #divModal {
        z-index: 10;
        position: absolute;
        border: 1px solid #000000;
        border-radius: 3px;
        background-color: #ffffff;
        left: 40%;
        top: 20%;
        width: 400px;
        min-height: 300px;
    }

    .modalHeading {
        text-align: center;
        font-size: 50px;
        text-decoration: underline;
        margin-bottom: 36px;
    }
</style>

<h1>Blazor Calender Example</h1>

@if (displayModal)
{
    <div id="divModal">
        <div class="container">
            <div class="panel panel-default">
                <div class="panel-heading modalHeading">Set Description</div>
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-4">
                            <label>From Date : </label>
                        </div>
                        <div class="col-md-8">
                            <input type="date" bind-value ="" style="width:100%;" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <label>To Date : </label>
                    </div>
                    <div class="col-md-8">
                        <input type="date" style="width:100%;" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <label>Description : </label>
                    </div>
                    <div class="col-md-8">
                        <input type="text" placeholder="Type here..." />
                    </div>
                </div>
                <div class="row" style="margin-bottom:10px;">
                    <div class="col-md-6">
                    </div>
                    <div class="col-md-6" style="text-align:right;">
                        <button class="btn btn-success" style="float:left;margin-right:5px;">Save</button>
                        <button class="btn btn-danger" @onclick="CloseModal" style="float:left;">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<select @onchange="LocalCalender">
    @foreach (string monthName in monthNames)
    {
        <option>@monthName</option>
    }
</select>

<table class="table table-bordered table-striped">
    <thead>
        <tr>
            @for (var dayIndex = 0; dayIndex < days.Count(); dayIndex++)
            {
                <th>
                    @days[dayIndex]
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @for (var weekIndex = 0; weekIndex < weeks.Count(); weekIndex++)
        {
            <tr>
                @for (var dayIndex = 0; dayIndex < weeks[weekIndex].Dates.Count(); dayIndex++)
                {
                    var wIndex = weekIndex;
                    var dIndex = dayIndex;

                    <td @ondblclick="@(() => OpenModal(wIndex, dIndex))">
                        @weeks[weekIndex].Dates[dayIndex].value
                        <br /><br />

                        <label style="color:#c00;font-weight:bold">@weeks[weekIndex].Dates[dayIndex].description</label>
                        <br /><br />

                    </td>
                }
            </tr>
        }
    </tbody>
</table>

@code{
    OnlineCalendarService dayEvent =new OnlineCalendarService();
    List<string> monthNames = new List<string>();
    List<string> days = new List<string>();
    List<Week> weeks = new List<Week>();
    DateTime startDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    DateTime endDate = (new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1)).AddMonths(1).AddDays(-1);
    bool displayModal = false;

    protected override void OnInitialized()
    {
        monthNames = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthGenitiveNames.ToList();
        GenerateCalenderHeader();
        GenerateCalenderBody();
    }
    private void LocalCalender(ChangeEventArgs e)
    {
        var month = e.Value.ToString();
        int monthIndex = DateTime.ParseExact(month, "MMMM", System.Globalization.CultureInfo.CreateSpecificCulture("en-GB")).Month;
        startDate = new DateTime(DateTime.Now.Year, monthIndex, 1);
        endDate = (new DateTime(DateTime.Now.Year, monthIndex, 1)).AddMonths(1).AddDays(-1);

        GenerateCalenderHeader();
        GenerateCalenderBody();
    }
    private void GenerateCalenderHeader()
    {
        var day1 = new List<string>();
        for (var dt = startDate; dt <= endDate; dt = dt.AddDays(1))
        {
            day1.Add(dt.ToString("dddd"));
        }
        days = day1.Distinct().ToList();
    }
    private void GenerateCalenderBody()
    {
        weeks = new List<Week>();

        int flag = 0;
        Week week = new Week();
        List<Event> dates = new List<Event>();
        var totalDays = (int)(endDate - startDate).TotalDays;
        int countdays = 0;

        for (var dt = startDate; dt <= endDate; dt = dt.AddDays(1))
        {
            flag++;

            dates.Add(new Event()
            {
                value = dt.ToString("dd-MMM-yyyy"),
                dayName = dt.ToString("dddd")
            });

            if (flag == 7)
            {
                week = new Week();
                week.Dates = dates;
                weeks.Add(week);

                dates = new List<Event>();
                flag = 0;
            }
            if (countdays == totalDays)
            {
                week = new Week();
                week.Dates = dates;
                weeks.Add(week);
                break;
            }
            countdays++;
        }
    }
    private void CloseModal()
    {
        displayModal = false;
    }
    private void OpenModal(int wIndex, int dIndex)
    {
        displayModal = true;
    }
}
*@