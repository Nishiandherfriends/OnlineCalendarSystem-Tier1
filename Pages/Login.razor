@layout LoginLayout
@page "/login"
@using OnlineCalendarSystem_Tier1.Login
@using OnlineCalendarSystem_Tier1.Models
@using login
@using OnlineCalendarSystem_Tier1.Data
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IUser UserService
@inject OnlineCalendarSystem_Tier1.Data.OnlineCalendarService OnlineCalendarService
<div class="row">
    <div class="col-6 card">
        <div class="col-12 row">

            <div class="col-6">
                <form>
                    <div>
                        <br /><br /><br /><br /><br />
                    </div>
                    <div>
                        <h3 style="font-weight:bold; color:purple">Calendar Login</h3>
                    </div>
                    <div>
                        <br />
                    </div>
                    <div class="col-12 row">
                        <input name='username' placeholder='Username' type='text' @bind-value="username">
                    </div>
                    <br />
                    <div class="col-12 row">
                        <input name='password' placeholder='Password' type='password' @bind-value="password">
                    </div>
                    <br />
                    <div class="col-12 row">
                        <span class="col-12"></span>
                        <a href="" onclick="@dayEvent.login(username,password)">
                            <button class="btn btn-outline-dark" type="submit">Log in</button>
                        </a>
                    </div>
                    <br />
                </form>
            </div>
            <div class="col-6">
                <img src="/images/pngegg.png" style="margin-top: 40px;" width="300px" height="300px" />
            </div>
        </div>
    </div>
</div>



@code{
    private User user;
    OnlineCalendarService dayEvent = new OnlineCalendarService();
    private string username;
    private string password;
    private string errorMessage;
    protected override Task OnInitializedAsync()
    {
        user = new User();
        return base.OnInitializedAsync();
    }
    public async Task PerformLogin()
    {
        errorMessage = "";
        try
        {
            ((Authentication)AuthenticationStateProvider).validateLogin(username, password);
            await OnlineCalendarService.login(username,password);
            username = "";
            password = "";
            NavigationManager.NavigateTo("/calendar");
        }
        catch (Exception e)
        {
            errorMessage = "404 User not found :( ";

        }
    }

    public async Task PerformLogOut()
    {
        errorMessage = "";
        username = "";
        password = "";
        try
        {
            ((Authentication)AuthenticationStateProvider).LogOut();
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            errorMessage = "404 not found";
        }
    }
}
