@layout LoginLayout
@page "/login"
@using OnlineCalendarSystem_Tier1.Login
@using OnlineCalendarSystem_Tier1.Models
@using login
@using OnlineCalendarSystem_Tier1.Data
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IUser UserService
@inject OnlineCalendarService OnlineCalendarService
<div class="row">
    <div class="col-12">
        <h2>Login to your account</h2>
        <EditForm Model="user" OnValidSubmit="PerformLogin">
            <RadzenCard>
                <DataAnnotationsValidator />
                <ValidationSummary />

                <label>Username</label>
                <RadzenTextBox @bind-Value="user.username"></RadzenTextBox>

                <label>Password</label>
                <RadzenPassword @bind-Value="user.password"></RadzenPassword>

                <hr />
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Login"
                              ButtonStyle="Radzen.ButtonStyle.Primary" class="btn-block mr-2"
                              Disabled="isBusy" />
                <RadzenButton ButtonType="Radzen.ButtonType.Button" Text="Register"
                              ButtonStyle="Radzen.ButtonStyle.Secondary" class="btn-block mr-2"
                              Disabled="isBusy" Click="GoToRegister" />
            </RadzenCard>
        </EditForm>
    </div>
</div>




@code{
    private User user = new User();
    private string errorMessage;
    public bool isBusy { get; set; }
    protected override Task OnInitializedAsync()
    {
        user = new User();
        return base.OnInitializedAsync();
    }
    public async Task PerformLogin()
    {
        isBusy = true;
        errorMessage = "";
       // var result = await OnlineCalendarService.login(user.username, user.password);
       // if (result.Equals(user))
        //{
            await ((Authentication)AuthenticationStateProvider).validateLogin(user.username, user.password);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("/");
      //  }
      //  isBusy = false;
    }

    public void GoToRegister()
    {
        NavigationManager.NavigateTo("/register");
    }
}
